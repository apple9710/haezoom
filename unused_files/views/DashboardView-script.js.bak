import { ref, reactive, onMounted, onUnmounted } from 'vue'

// ÏÇ¨Ïù¥ÎìúÎ∞î ÏÉÅÌÉú Í¥ÄÎ¶¨
const sidebarOpen = ref(true)

// Ìó§ÎçîÏóêÏÑú ÏÇ¨Ïù¥ÎìúÎ∞î ÌÜ†Í∏Ä Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
const handleSidebarToggle = (event) => {
  sidebarOpen.value = event.detail.isOpen
}

// Îç∞Ïù¥ÌÑ∞ Ï¢ÖÎ•òÎ≥Ñ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏúÑÏ†Ø Ï†ïÏùò
const widgetDefinitions = {
  power_usage: [
    {
      id: 'power-line-chart',
      name: 'ÏÑ† ÏãúÍ≥ÑÏó¥ Í∑∏ÎûòÌîÑ',
      icon: 'üìà',
      type: 'line-chart',
      description: 'ÏãúÍ∞ÑÏóê Îî∞Î•∏ Ï†ÑÎ†• ÏÇ¨Ïö©Îüâ Î≥ÄÌôîÎ•º ÏÑ†Í∑∏ÎûòÌîÑÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ~ÌïòÎ£®',
    },
    {
      id: 'power-bar-chart',
      name: 'ÎßâÎåÄ ÏãúÍ≥ÑÏó¥ Í∑∏ÎûòÌîÑ',
      icon: 'üìä',
      type: 'bar-chart',
      description: 'ÏãúÍ∞ÑÏóê Îî∞Î•∏ Ï†ÑÎ†• ÏÇ¨Ïö©Îüâ Î≥ÄÌôîÎ•º ÎßâÎåÄÍ∑∏ÎûòÌîÑÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ~ÌïòÎ£®',
    },
    {
      id: 'power-pie-chart',
      name: 'Ïõê Í∑∏ÎûòÌîÑ',
      icon: 'üç∞',
      type: 'pie-chart',
      description: 'Ï†ÑÎ†• ÏÇ¨Ïö©Îüâ ÎπÑÏú®ÏùÑ ÏõêÌòï Ï∞®Ìä∏Î°ú ÌëúÏãú',
      updateCycle: '15Î∂Ñ~ÌïòÎ£®',
    },
    {
      id: 'power-box-widget',
      name: 'Î∞ïÏä§ ÏúÑÏ†Ø',
      icon: 'üì¶',
      type: 'box-widget',
      description: 'ÌòÑÏû¨ Ï†ÑÎ†•ÎüâÏùÑ Ïà´ÏûêÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ',
    },
  ],
  solar_generation: [
    {
      id: 'solar-line-chart',
      name: 'ÏÑ† ÏãúÍ≥ÑÏó¥ Í∑∏ÎûòÌîÑ',
      icon: 'üìà',
      type: 'line-chart',
      description: 'ÌÉúÏñëÍ¥ë Î∞úÏ†ÑÎüâÍ≥º ÏòàÏ∏°ÎüâÏùÑ ÏÑ†Í∑∏ÎûòÌîÑÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ~ÌïòÎ£®',
    },
    {
      id: 'solar-bar-chart',
      name: 'ÎßâÎåÄ ÏãúÍ≥ÑÏó¥ Í∑∏ÎûòÌîÑ',
      icon: 'üìä',
      type: 'bar-chart',
      description: 'ÌÉúÏñëÍ¥ë Î∞úÏ†ÑÎüâÍ≥º ÏòàÏ∏°ÎüâÏùÑ ÎßâÎåÄÍ∑∏ÎûòÌîÑÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ~ÌïòÎ£®',
    },
    {
      id: 'solar-box-widget',
      name: 'Î∞ïÏä§ ÏúÑÏ†Ø',
      icon: 'üì¶',
      type: 'box-widget',
      description: 'ÌòÑÏû¨ Î∞úÏ†ÑÎüâÏùÑ Ïà´ÏûêÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ',
    },
  ],
  environment: [
    {
      id: 'temp-bar-widget',
      name: 'ÎßâÎåÄ(Ïò®ÎèÑ) ÏúÑÏ†Ø',
      icon: 'üå°Ô∏è',
      type: 'bar-gauge-widget',
      description: 'Ïò®ÎèÑÎ•º ÎßâÎåÄ Í≤åÏù¥ÏßÄÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ~15Î∂Ñ',
    },
    {
      id: 'humidity-bar-widget',
      name: 'ÎßâÎåÄ(ÏäµÎèÑ) ÏúÑÏ†Ø',
      icon: 'üíß',
      type: 'bar-gauge-widget',
      description: 'ÏäµÎèÑÎ•º ÌçºÏÑºÌä∏ ÎßâÎåÄÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ~15Î∂Ñ',
    },
    {
      id: 'pressure-box-widget',
      name: 'Î∞ïÏä§ ÏúÑÏ†Ø',
      icon: 'üì¶',
      type: 'box-widget',
      description: 'ÏïïÎ†•Í∞íÏùÑ Ïà´ÏûêÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ~15Î∂Ñ',
    },
  ],
  equipment_control: [
    {
      id: 'on-off-control',
      name: 'Ï†úÏñ¥(ON/OFF) ÏúÑÏ†Ø',
      icon: 'üîò',
      type: 'on-off-control',
      description: 'ÏÑ§ÎπÑ ON/OFF Ï†úÏñ¥ Î∞è ÌòÑÏû¨ ÏÉÅÌÉú ÌëúÏãú',
      updateCycle: 'Ïã§ÏãúÍ∞Ñ',
    },
    {
      id: 'up-down-control',
      name: 'Ï†úÏñ¥(UP/DOWN) ÏúÑÏ†Ø',
      icon: 'üîº',
      type: 'up-down-control',
      description: 'Ïò®ÎèÑ/ÏïïÎ†•/Ï°∞ÎèÑ Îì± ÏàòÏπò Ï†úÏñ¥',
      updateCycle: 'Ïã§ÏãúÍ∞Ñ',
    },
    {
      id: 'status-widget',
      name: 'ÏÉÅÌÉúÌëúÏãú ÏúÑÏ†Ø',
      icon: 'üü¢',
      type: 'status-widget',
      description: 'ÌòÑÏû¨ ÏÉÅÌÉúÎ•º ÏÉâÏÉÅÏúºÎ°ú ÌëúÏãú',
      updateCycle: '1Î∂Ñ',
    },
  ],
  system_info: [
    {
      id: 'alarm-widget',
      name: 'ÏïåÎûå ÏúÑÏ†Ø',
      icon: 'üö®',
      type: 'alarm-widget',
      description: 'ÌÜµÏã† ÎòêÎäî ÏÑ§ÎπÑ ÏïåÎûå ÌëúÏãú',
      updateCycle: 'Ïã§ÏãúÍ∞Ñ',
    },
    {
      id: 'energy-report',
      name: 'ÏóêÎÑàÏßÄ ÏßÑÎã®Î≥¥Í≥†ÏÑú',
      icon: 'üìã',
      type: 'energy-report',
      description: 'PDF ÏßÑÎã®Î≥¥Í≥†ÏÑú Î∂ÑÏÑù Í≤∞Í≥º',
      updateCycle: 'ÌïòÎ£®',
    },
  ],
  misc: [
    {
      id: 'page-link',
      name: 'ÌéòÏù¥ÏßÄ ÎßÅÌÅ¨ ÏúÑÏ†Ø',
      icon: 'üîó',
      type: 'page-link',
      description: 'URL ÎßÅÌÅ¨ ÌëúÏãú Î∞è Ïù¥Îèô',
      updateCycle: 'Ï†ïÏ†Å',
    },
    {
      id: 'image-widget',
      name: 'Í∑∏Î¶ºÏÇΩÏûÖ ÏúÑÏ†Ø',
      icon: 'üñºÔ∏è',
      type: 'image-widget',
      description: 'Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÌëúÏãú',
      updateCycle: 'Ï†ïÏ†Å',
    },
  ],
}

// ÏúÑÏ†Ø ÏÑ†ÌÉù Î™®Îã¨ ÏÉÅÌÉú
const widgetSelector = reactive({
  show: false,
  category: '',
  dataType: '',
})

// ÎåÄÏãúÎ≥¥Îìú ÏÉÅÌÉú
const dashboardWidgets = ref([])
const dashboardGrid = ref(null)

// ÌÅ¨Í∏∞ Ï°∞Ï†à Î™®Îã¨
const resizeModal = reactive({
  show: false,
  widget: null,
  width: 2,
  height: 2,
})

// ÏúÑÏ†Ø ÏÑ†ÌÉùÍ∏∞ ÌëúÏãú
const showWidgetSelector = (category, dataType) => {
  widgetSelector.category = category
  widgetSelector.dataType = dataType
  widgetSelector.show = true
}

// ÏúÑÏ†Ø ÏÑ†ÌÉùÍ∏∞ Îã´Í∏∞
const closeWidgetSelector = () => {
  widgetSelector.show = false
  widgetSelector.category = ''
  widgetSelector.dataType = ''
}

// Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏúÑÏ†Ø Í∞ÄÏ†∏Ïò§Í∏∞
const getAvailableWidgets = (category) => {
  return widgetDefinitions[category] || []
}

// ÏúÑÏ†Ø Ï∂îÍ∞Ä
const addWidget = (widget) => {
  const newWidget = {
    ...widget,
    instanceId: Date.now() + Math.random(),
    dataType: widgetSelector.dataType,
    gridSize: { width: 2, height: 2 },
    data: {},
    config: {
      updateCycle: widget.updateCycle,
      dataSource: '',
      customSettings: {},
    },
  }
  dashboardWidgets.value.push(newWidget)
  closeWidgetSelector()
}

// ÏúÑÏ†Ø Ï†úÍ±∞
const removeWidget = (widget) => {
  if (confirm(`${widget.name} ÏúÑÏ†ØÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`)) {
    const index = dashboardWidgets.value.findIndex((w) => w.instanceId === widget.instanceId)
    if (index > -1) {
      dashboardWidgets.value.splice(index, 1)
    }
  }
}

// ÏúÑÏ†Ø ÌÅ¨Í∏∞ Ï°∞Ï†à
const resizeWidget = (widget) => {
  resizeModal.widget = widget
  resizeModal.width = widget.gridSize.width
  resizeModal.height = widget.gridSize.height
  resizeModal.show = true
}

const closeResizeModal = () => {
  resizeModal.show = false
  resizeModal.widget = null
}

const applyResize = () => {
  if (resizeModal.widget) {
    resizeModal.widget.gridSize.width = resizeModal.width
    resizeModal.widget.gridSize.height = resizeModal.height
  }
  closeResizeModal()
}

// ÏúÑÏ†Ø ÏÑ§Ï†ï
const configureWidget = (widget) => {
  alert(`${widget.name} ÏúÑÏ†Ø ÏÑ§Ï†ï Í∏∞Îä•ÏùÄ Í∞úÎ∞ú Ï§ëÏûÖÎãàÎã§.`)
}

// ÎåÄÏãúÎ≥¥Îìú Ï†ÄÏû•
const saveDashboard = () => {
  localStorage.setItem('haezoom-dashboard-config', JSON.stringify(dashboardWidgets.value))

  const toast = document.createElement('div')
  toast.className = 'save-toast'
  toast.textContent = '‚úÖ ÎåÄÏãúÎ≥¥ÎìúÍ∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!'
  toast.style.cssText = `
    position: fixed;
    top: 120px;
    right: 24px;
    background: #E16349;
    color: white;
    padding: 16px 24px;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.2);
    z-index: 10000;
    font-weight: 600;
    animation: slideIn 0.3s ease;
  `
  document.body.appendChild(toast)

  setTimeout(() => {
    toast.remove()
  }, 3000)
}

// ÎåÄÏãúÎ≥¥Îìú Î∂àÎü¨Ïò§Í∏∞
const loadDashboard = () => {
  const saved = localStorage.getItem('haezoom-dashboard-config')
  if (saved) {
    dashboardWidgets.value = JSON.parse(saved)
  }
}

// ÎåÄÏãúÎ≥¥Îìú Ï¥àÍ∏∞Ìôî
const clearDashboard = () => {
  if (confirm('Î™®Îì† ÏúÑÏ†ØÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n(Ï†ÄÏû•Îêú ÎåÄÏãúÎ≥¥Îìú ÏÑ§Ï†ïÎèÑ Ìï®Íªò ÏÇ≠Ï†úÎê©ÎãàÎã§)')) {
    dashboardWidgets.value = []
    localStorage.removeItem('haezoom-dashboard-config')
  }
}

// ÎùºÏù¥ÌîÑÏÇ¨Ïù¥ÌÅ¥
const setupDashboard = () => {
  onMounted(() => {
    loadDashboard()
    // Ìó§ÎçîÏóêÏÑú Ïò§Îäî ÏÇ¨Ïù¥ÎìúÎ∞î ÌÜ†Í∏Ä Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
    window.addEventListener('sidebar-toggle', handleSidebarToggle)
  })

  onUnmounted(() => {
    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
    window.removeEventListener('sidebar-toggle', handleSidebarToggle)
  })
}

export {
  sidebarOpen,
  dashboardWidgets,
  dashboardGrid,
  widgetSelector,
  resizeModal,
  showWidgetSelector,
  closeWidgetSelector,
  getAvailableWidgets,
  addWidget,
  removeWidget,
  resizeWidget,
  closeResizeModal,
  applyResize,
  configureWidget,
  saveDashboard,
  clearDashboard,
  setupDashboard
}
